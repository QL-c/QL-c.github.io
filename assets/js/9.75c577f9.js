(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{410:function(t,a,e){"use strict";e.r(a);var n=e(33),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_03-对象高级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-对象高级"}},[t._v("#")]),t._v(" 03_对象高级")]),t._v(" "),e("h2",{attrs:{id:"对象的创建模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建模式"}},[t._v("#")]),t._v(" 对象的创建模式")]),t._v(" "),e("ul",[e("li",[t._v("Object构造函数模式"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj = {};\nobj.name = 'Tom'\nobj.setName = function(name){this.name=name}\n")])])])]),t._v(" "),e("li",[t._v("对象字面量模式"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj = {\n  name : 'Tom',\n  setName : function(name){this.name = name}\n}\n")])])])]),t._v(" "),e("li",[t._v("构造函数模式"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.setName = function(name){this.name=name;};\n}\nnew Person('tom', 12);\n")])])])]),t._v(" "),e("li",[t._v("构造函数+原型的组合模式"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\nPerson.prototype.setName = function(name){this.name=name;};\nnew Person('tom', 12);\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"继承模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承模式"}},[t._v("#")]),t._v(" 继承模式")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("原型链继承 : 得到方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Parent(){}\nParent.prototype.test = function(){};\nfunction Child(){}\nChild.prototype = new Parent(); // 子类型的原型指向父类型实例\nChild.prototype.constructor = Child// 让子类型的原型的constructor指向子类型\nvar child = new Child(); //有test()\n")])])])]),t._v(" "),e("li",[e("p",[t._v("借用构造函数 : 得到属性")])]),t._v(" "),e("li",[e("p",[t._v("在子类型构造函数中通过call()调用父类型构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Parent(xxx){this.xxx = xxx}\nParent.prototype.test = function(){};\nfunction Child(xxx,yyy){\n    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)\n}\nvar child = new Child('a', 'b');  //child.xxx为'a', 但child没有test()\n")])])])]),t._v(" "),e("li",[e("p",[t._v("组合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Parent(xxx){this.xxx = xxx}\nParent.prototype.test = function(){};\nfunction Child(xxx,yyy){\n    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)\n}\nChild.prototype = new Parent(); //得到test()\nvar child = new Child(); //child.xxx为'a', 也有test()\n")])])])]),t._v(" "),e("li",[e("p",[t._v("new一个对象背后做了些什么?")]),t._v(" "),e("ul",[e("li",[t._v("创建一个空对象")]),t._v(" "),e("li",[t._v("给对象设置__proto__, 值为构造函数对象的prototype属性值   this."),e("strong",[t._v("proto")]),t._v(" = Fn.prototype")]),t._v(" "),e("li",[t._v("执行构造函数体(给对象添加属性/方法)")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);
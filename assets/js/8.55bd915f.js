(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{412:function(_,v,l){"use strict";l.r(v);var i=l(33),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"_02-函数高级"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_02-函数高级"}},[_._v("#")]),_._v(" 02_函数高级")]),_._v(" "),l("h2",{attrs:{id:"原型与原型链"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[_._v("#")]),_._v(" 原型与原型链")]),_._v(" "),l("p",[_._v("1.函数的prototype属性")]),_._v(" "),l("ul",[l("li",[_._v("每个函数都有一个prototype属性，它默认指向一个Object空实例对象（即称为：原型对象）")]),_._v(" "),l("li",[_._v("原型对象中有一个属性constructor，它指向函数对象")])]),_._v(" "),l("p",[_._v("2.给原型对象添加属性（一般都是方法）")]),_._v(" "),l("ul",[l("li",[_._v("作用：函数的所有实例对象自动拥有原型中的属性（方法）")])]),_._v(" "),l("ul",[l("li",[_._v("所有函数都有一个特别的属性:\n"),l("ul",[l("li",[l("code",[_._v("prototype")]),_._v(" : 显式原型属性")])])]),_._v(" "),l("li",[_._v("所有实例对象都有一个特别的属性:\n"),l("ul",[l("li",[l("code",[_._v("__proto__")]),_._v(" : 隐式原型属性")])])]),_._v(" "),l("li",[_._v("实例对象的隐式原型的值为其对应构造函数的显示原型的值")])]),_._v(" "),l("p",[_._v("3.原型链")]),_._v(" "),l("p",[_._v("​\t访问一个对象的属性时，")]),_._v(" "),l("ul",[l("li",[_._v("先在自身属性中查找，找到返回")]),_._v(" "),l("li",[_._v("如果没有，再沿着__proto__这条链向上查找，找到返回")]),_._v(" "),l("li",[_._v("如果最终没找到，返回undefined")]),_._v(" "),l("li",[_._v("别名：隐式原型链")]),_._v(" "),l("li",[_._v("作用：查找对象的属性（方法）")])]),_._v(" "),l("ul",[l("li",[_._v("显式原型与隐式原型的关系\n"),l("ul",[l("li",[_._v("函数的prototype: 定义函数时被自动赋值, 值默认为{}, 即用为原型对象（Object空对象）")]),_._v(" "),l("li",[_._v("实例对象的__proto__: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值")]),_._v(" "),l("li",[_._v("原型对象即为当前实例对象的父对象")]),_._v(" "),l("li",[_._v("程序员能直接操作显式原型，但不能直接操作隐式原型（ES6之前）")])])]),_._v(" "),l("li",[_._v("原型链\n"),l("ul",[l("li",[_._v("所有的实例对象都有__proto__属性, 它指向的就是原型对象")]),_._v(" "),l("li",[_._v("这样通过__proto__属性就形成了一个链的结构----\x3e原型链")]),_._v(" "),l("li",[_._v("当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找")]),_._v(" "),l("li",[_._v("当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作")])])]),_._v(" "),l("li",[_._v("1.函数的显示原型指向的对象默认是空Object实例对象（但Object不满足）")]),_._v(" "),l("li",[_._v("2.所有函数都是Function的实例（包含Function）")]),_._v(" "),l("li",[_._v("3.Object的原型对象是原型链尽头")]),_._v(" "),l("li",[_._v("4.读取对象的属性值时，会自动到原型链中查找")]),_._v(" "),l("li",[_._v("5.设置对象的属性值时，不会查找原型链，如果当前对象没有此属性，直接添加此属性并设置其值")]),_._v(" "),l("li",[_._v("6.方法一般定义在原型中，属性一般通过构造函数定义在对象本身上")]),_._v(" "),l("li",[_._v("7.instanceof是如何判断的？\n"),l("ul",[l("li",[_._v("表达式：A instanceof B")]),_._v(" "),l("li",[_._v("如果B函数的显式原型对象在A对象的原型链上，返回true，否则返回false")])])]),_._v(" "),l("li",[l("ol",{attrs:{start:"8"}},[l("li",[_._v("Function是通过new自己产生的实例")])])])]),_._v(" "),l("h2",{attrs:{id:"执行上下文与执行上下文栈"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与执行上下文栈"}},[_._v("#")]),_._v(" 执行上下文与执行上下文栈")]),_._v(" "),l("ul",[l("li",[_._v("变量提升与函数提升\n"),l("ul",[l("li",[_._v("变量提升: 在变量定义语句之前, 就可以访问到这个变量(undefined)")]),_._v(" "),l("li",[_._v("函数提升: 在函数定义语句之前, 就执行该函数")]),_._v(" "),l("li",[_._v("先有变量提升, 再有函数提升")])])]),_._v(" "),l("li",[_._v("理解\n"),l("ul",[l("li",[_._v("执行上下文: 由js引擎自动创建的对象, 包含对应作用域中的所有变量属性")]),_._v(" "),l("li",[_._v("执行上下文栈: 用来管理产生的多个执行上下文")])])]),_._v(" "),l("li",[_._v("分类:\n"),l("ul",[l("li",[_._v("全局: window")]),_._v(" "),l("li",[_._v("函数: 对程序员来说是透明的")])])]),_._v(" "),l("li",[_._v("生命周期\n"),l("ul",[l("li",[_._v("全局 : 准备执行全局代码前产生, 当页面刷新/关闭页面时死亡")]),_._v(" "),l("li",[_._v("函数 : 调用函数时产生, 函数执行完时死亡")])])]),_._v(" "),l("li",[_._v("包含哪些属性:\n"),l("ul",[l("li",[_._v("全局 :\n"),l("ul",[l("li",[_._v("用var定义的全局变量  ==>undefined")]),_._v(" "),l("li",[_._v("使用function声明的函数   ===>function")]),_._v(" "),l("li",[_._v("this   ===>window")])])]),_._v(" "),l("li",[_._v("函数\n"),l("ul",[l("li",[_._v("用var定义的局部变量  ==>undefined")]),_._v(" "),l("li",[_._v("使用function声明的函数   ===>function")]),_._v(" "),l("li",[_._v("this   ===> 调用函数的对象, 如果没有指定就是window")]),_._v(" "),l("li",[_._v("形参变量   ===>对应实参值")]),_._v(" "),l("li",[_._v("arguments ===>实参列表的伪数组")])])])])]),_._v(" "),l("li",[_._v("执行上下文创建和初始化的过程\n"),l("ul",[l("li",[_._v("全局:\n"),l("ul",[l("li",[_._v("在全局代码执行前最先创建一个全局执行上下文(window)")]),_._v(" "),l("li",[_._v("收集一些全局变量, 并初始化")]),_._v(" "),l("li",[_._v("将这些变量设置为window的属性")])])]),_._v(" "),l("li",[_._v("函数:\n"),l("ul",[l("li",[_._v("在调用函数时, 在执行函数体之前先创建一个函数执行上下文")]),_._v(" "),l("li",[_._v("收集一些局部变量, 并初始化")]),_._v(" "),l("li",[_._v("将这些变量设置为执行上下文的属性")])])])])])]),_._v(" "),l("h2",{attrs:{id:"作用域与作用域链"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#作用域与作用域链"}},[_._v("#")]),_._v(" 作用域与作用域链")]),_._v(" "),l("ul",[l("li",[_._v("理解:\n"),l("ul",[l("li",[_._v("作用域: 一块代码区域, 在编码时就确定了, 不会再变化")]),_._v(" "),l("li",[_._v("作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量")])])]),_._v(" "),l("li",[_._v("分类:\n"),l("ul",[l("li",[_._v("全局")]),_._v(" "),l("li",[_._v("函数")]),_._v(" "),l("li",[_._v("js没有块作用域(在ES6之前)")])])]),_._v(" "),l("li",[_._v("作用\n"),l("ul",[l("li",[_._v("作用域: 隔离变量, 可以在不同作用域定义同名的变量不冲突")]),_._v(" "),l("li",[_._v("作用域链: 查找变量")])])]),_._v(" "),l("li",[_._v("区别作用域与执行上下文\n"),l("ul",[l("li",[_._v("作用域: 静态的, 编码时就确定了(不是在运行时), 一旦确定就不会变化了")]),_._v(" "),l("li",[_._v("执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失")]),_._v(" "),l("li",[_._v("联系: 执行上下文环境是从属于所在的作用域中的")])])]),_._v(" "),l("li",[_._v("补充区别\n"),l("ul",[l("li",[_._v("全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。")]),_._v(" "),l("li",[_._v("全局执行上下文环境是在全局作用域确定之后，Js代码马上执行之前创建")]),_._v(" "),l("li",[_._v("函数执行上下文是在调用函数时，函数体代码执行之前创建")])])])]),_._v(" "),l("h2",{attrs:{id:"闭包"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[_._v("#")]),_._v(" 闭包")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("理解:")]),_._v(" "),l("ul",[l("li",[_._v("当嵌套的内部函数引用了外部函数的变量时就产生了闭包")]),_._v(" "),l("li",[_._v("通过chrome工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性")])])]),_._v(" "),l("li",[l("p",[_._v("作用:")]),_._v(" "),l("ul",[l("li",[_._v("延长局部变量的生命周期")]),_._v(" "),l("li",[_._v("让函数外部能操作内部的局部变量")])])]),_._v(" "),l("li",[l("p",[_._v("写一个闭包程序")]),_._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[_._v("function fn1() {\n  var a = 2;\n  function fn2() {\n    a++;\n    console.log(a);\n  }\n  return fn2;\n}\nvar f = fn1();\nf();\nf();\n")])])])]),_._v(" "),l("li",[l("p",[_._v("闭包的生命周期")]),_._v(" "),l("ul",[l("li",[_._v("产生：在嵌套内部函数定义执行完时就产生了（不是在调用）")]),_._v(" "),l("li",[_._v("死亡：在嵌套的内部函数成为垃圾对象时")])])]),_._v(" "),l("li",[l("p",[_._v("闭包应用:")]),_._v(" "),l("ul",[l("li",[_._v("模块化: 封装一些数据以及操作数据的函数, 向外暴露一些行为")]),_._v(" "),l("li",[_._v("循环遍历加监听")]),_._v(" "),l("li",[_._v("JS框架(jQuery)大量使用了闭包")])])]),_._v(" "),l("li",[l("p",[_._v("缺点:")]),_._v(" "),l("ul",[l("li",[_._v("变量占用内存的时间可能会过长")]),_._v(" "),l("li",[_._v("可能导致内存泄露")]),_._v(" "),l("li",[_._v("解决:\n"),l("ul",[l("li",[_._v("及时释放 : f = null; //让内部函数对象成为垃圾对象")])])])])])]),_._v(" "),l("h2",{attrs:{id:"内存溢出与内存泄露"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出与内存泄露"}},[_._v("#")]),_._v(" 内存溢出与内存泄露")]),_._v(" "),l("ol",[l("li",[_._v("内存溢出")])]),_._v(" "),l("ul",[l("li",[_._v("一种程序运行出现的错误")]),_._v(" "),l("li",[_._v("当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误")])]),_._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[_._v("内存泄露")])]),_._v(" "),l("ul",[l("li",[_._v("占用的内存没有及时释放")]),_._v(" "),l("li",[_._v("内存泄露积累多了就容易导致内存溢出")]),_._v(" "),l("li",[_._v("常见的内存泄露:\n"),l("ul",[l("li",[_._v("意外的全局变量")]),_._v(" "),l("li",[_._v("没有及时清理的计时器或回调函数")]),_._v(" "),l("li",[_._v("闭包")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);